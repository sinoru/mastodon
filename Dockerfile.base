# syntax=docker/dockerfile:1.4
# Ignoring these here since we don't want to pin any versions and the Debian image removes apt-get content after use
# See: https://github.com/hadolint/hadolint/wiki/DL3008
# hadolint global ignore=DL3008,DL3009

# Ruby version to use, change with [--build-arg RUBY_VERSION=]
ARG RUBY_VERSION="3.2.2"

# Node version to use, change with [--build-arg NODE_VERSION=]
ARG NODE_VERSION="20.7.0"

# FFmpeg version to use, change with [--build-arg FFMPEG_VERSION=]
ARG FFMPEG_VERSION="6.0"

# ImageMagick version to use, change with [--build-arg IMAGEMAGICK_VERSION=]
ARG IMAGEMAGICK_VERSION="7.1.1-17"

# Image variant to use for ruby and node, change with [--build-arg IMAGE_VARIANT=]
ARG IMAGE_VARIANT="bookworm"

# Image to use for ruby, change with [--build-arg RUBY_IMAGE=]
ARG RUBY_IMAGE="ruby:${RUBY_VERSION}-slim-${IMAGE_VARIANT}"

# Image to use for node, change with [--build-arg NODE_IMAGE=]
ARG NODE_IMAGE="node:${NODE_VERSION}-${IMAGE_VARIANT}-slim"

########################################################################################################################
FROM ${NODE_IMAGE} as node

RUN set -eux; \
    rm /usr/local/bin/yarn* /usr/local/bin/docker-entrypoint.sh;

########################################################################################################################
FROM ${RUBY_IMAGE} as base
ARG TARGETPLATFORM

RUN \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/cache,target=/var/cache,sharing=locked \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/lib/apt,target=/var/lib/apt,sharing=locked \
    --mount=type=tmpfs,target=/var/log \
    set -eux; \
    # Remove /etc/apt/apt.conf.d/docker-clean for keeping caches
    rm -f /etc/apt/apt.conf.d/docker-clean; \
    # Update apt
    apt-get update; \
    # Upgrade packages
    apt-get -yq dist-upgrade; \
    # Install dependencies
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        # Dependencies for nodejs
        libatomic1 \
    ;

# Node image contains node on /usr/local without /usr/local/share
#
# See: https://github.com/nodejs/docker-node/blob/151ec75067877000120d634fc7fd2a18c544e3d4/20/bookworm-slim/Dockerfile
COPY --link --from=node /usr/local/bin /usr/local/bin
COPY --link --from=node /usr/local/include /usr/local/include
COPY --link --from=node /usr/local/lib /usr/local/lib

ENV COREPACK_HOME /usr/local/corepack

RUN set -eux; \
    corepack enable; \
    yarn set version classic; \
    # Smoke test for node, yarn
    node --version; \
    yarn --version; \
    # Remove tmp files from node
    rm -rf .yarn* /tmp/* /usr/local/share/.cache;

RUN \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/cache,target=/var/cache,sharing=locked \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/lib/apt,target=/var/lib/apt,sharing=locked \
    --mount=type=tmpfs,target=/var/log \
    set -eux; \
    # Update apt
    apt-get update; \
    # Install dependencies
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        # Dependencies for ImageMagick and FFmpeg
        libbz2-1.0 \
        liblzma5 \
        # Dependencies for ImageMagick
        libheif1 \
        libjxl0.7 \
        libpng16-16 \
        libraw20 \
        libtiff6 \
        libwebp7 \
        libwebpdemux2 \
        libwebpmux3 \
        libzip4 \
        # Dependencies for FFmpeg
        libaom3 \
        libdav1d6 \
        libdrm2 \
        libmp3lame0 \
        libnuma1 \
        libopus0 \
        libva2 \
        libva-drm2 \
        libvorbis0a \
        libvorbisenc2 \
        libvorbisfile3 \
        libvpx7 \
        libvulkan1 \
        libx264-164 \
        libx265-199 \
        zlib1g \
    ;   

########################################################################################################################
FROM base as builder-base
ARG TARGETPLATFORM
ARG MASTODON_HOME

WORKDIR ${MASTODON_HOME}

RUN \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/cache,target=/var/cache,sharing=locked \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/lib/apt,target=/var/lib/apt,sharing=locked \
    --mount=type=tmpfs,target=/var/log \
    set -eux; \
    # Update apt
    apt-get update; \
    # Install builder dependencies
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        cmake \
        gcc \
        git \
        g++ \
        libtool \
        make \
        meson \
        nasm \
        ninja-build \
        pkg-config \
    ;

########################################################################################################################
FROM builder-base as imagemagick-builder
ARG TARGETPLATFORM
ARG IMAGEMAGICK_VERSION

RUN \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/cache,target=/var/cache,sharing=locked \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/lib/apt,target=/var/lib/apt,sharing=locked \
    --mount=type=tmpfs,target=/var/log \
    set -eux; \
    # Update apt
    apt-get update; \
    # Install ImageMagick build dependencies
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libbz2-dev \
        libheif-dev \
        libjxl-dev \
        libltdl-dev \
        liblzma-dev \
        libpng-dev \
        libraw-dev \
        libtiff-dev \
        libwebp-dev \
        libzip-dev \
        zlib1g-dev \
    ;

RUN set -eux; \
    imagemagick_workdir="$(mktemp -d)"; \
    imagemagick_prefix="/opt/magick"; \
    cd ${imagemagick_workdir}; \
    git clone -b ${IMAGEMAGICK_VERSION} --depth 1 https://github.com/ImageMagick/ImageMagick.git .; \
    LDFLAGS="-Wl,-rpath,'\$\$ORIGIN/../lib'" ./configure \
        --prefix="${imagemagick_prefix}" \
        # Optional Features
        --disable-openmp \
        --enable-shared \
        --disable-static \
        --disable-deprecated \
        --disable-docs \
        # Optional Packages
        --with-security-policy=websafe \
        --without-magick-plus-plus \
        --without-fontconfig \
        --without-freetype \
    ; \
    make -j$(nproc); \
    make install; \
    rm -r \
        "${imagemagick_prefix}/include" \
        "${imagemagick_prefix}/lib/pkgconfig" \
        "${imagemagick_prefix}/share" \
    ;

########################################################################################################################
FROM builder-base as ffmpeg-builder
ARG TARGETPLATFORM
ARG FFMPEG_VERSION

RUN \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/cache,target=/var/cache,sharing=locked \
    --mount=type=cache,id=${TARGETPLATFORM}-/var/lib/apt,target=/var/lib/apt,sharing=locked \
    --mount=type=tmpfs,target=/var/log \
    set -eux; \
    # Update apt
    apt-get update; \
    # Install FFmpeg build dependencies
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        libaom-dev \
        libbz2-dev \
        libdav1d-dev \
        libdrm-dev \
        liblzma-dev \
        libmp3lame-dev \
        libnuma-dev \
        libopus-dev \
        libva-dev \
        libvorbis-dev \
        libvpx-dev \
        libvulkan-dev \
        libx264-dev \
        libx265-dev \
        zlib1g-dev \
    ;

RUN set -eux; \
    ffmpeg_workdir="$(mktemp -d)"; \
    ffmpeg_prefix="/opt/ffmpeg"; \
    cd ${ffmpeg_workdir}; \
    git clone -b "n${FFMPEG_VERSION}" --depth 1 https://github.com/FFmpeg/FFmpeg.git .; \
    ./configure \
        --prefix="${ffmpeg_prefix}" \
        --enable-rpath \
        --enable-gpl \
        --enable-version3 \
        --enable-nonfree \
        --disable-static \
        --enable-shared \
        # Program Options
        --disable-programs \
        --enable-ffmpeg \
        --enable-ffprobe \
        # Documentation Options
        --disable-doc \
        # Component Options
        --disable-network \
        # External Library Support
        --enable-libaom \
        --enable-libdav1d \
        --enable-libdrm \
        --enable-libmp3lame \
        --enable-libopus \
        --enable-libvorbis \
        --enable-libvpx \
        --enable-libx264 \
        --enable-libx265 \
        --enable-vaapi \
        --enable-vulkan \
    ; \
    make -j$(nproc); \
    make install; \
    rm -r \
        "${ffmpeg_prefix}/include" \
        "${ffmpeg_prefix}/lib/pkgconfig" \
        "${ffmpeg_prefix}/share" \
    ;

########################################################################################################################
FROM base

# Copy output of the imagemagick-builder into this image layer
COPY --link --from=imagemagick-builder /opt/magick /opt/magick
RUN set -eux; \
    ln -s /opt/magick/bin/* /usr/local/bin/; \
    # smoke tests for magick
    magick -version;

# Copy output of the ffmpeg-builder into this image layer
COPY --link --from=ffmpeg-builder /opt/ffmpeg /opt/ffmpeg
RUN set -eux; \
    ln -s /opt/ffmpeg/bin/* /usr/local/bin/; \
    # smoke tests for ffmpeg, ffprobe
    ffmpeg -version; \
    ffprobe -version;
